// Mocks generated by Mockito 5.2.0 from annotations
// in tvseries/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:core/core.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i7;
import 'package:tvseries/tvseries.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeTvsDetailResponse_1 extends _i1.Fake
    implements _i3.TvsDetailResponse {}

class _FakeTvsRepository_2 extends _i1.Fake implements _i3.TvsRepository {}

class _FakeResponse_3 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_4 extends _i1.Fake implements _i4.StreamedResponse {
}

/// A class which mocks [TvsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvsRepository extends _i1.Mock implements _i3.TvsRepository {
  MockTvsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> getNowPlayingTvs() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTvs, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> getPopularTvs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvs, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> getTopRatedTvs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvs, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.TvsDetail>> getTvsDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvsDetail, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, _i3.TvsDetail>>.value(
                  _FakeEither_0<_i6.Failure, _i3.TvsDetail>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i3.TvsDetail>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> getTvsRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvsRecommendations, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> searchTvs(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvs, [query]),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> getWatchlistTvs() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTvs, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> saveWatchlist(
          _i3.TvsDetail? tvs) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [tvs]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i5.Future<_i2.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> removeWatchlist(
          _i3.TvsDetail? tvs) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [tvs]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i5.Future<_i2.Either<_i6.Failure, String>>);
  @override
  _i5.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [TvsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvsRemoteDataSource extends _i1.Mock
    implements _i3.TvsRemoteDataSource {
  MockTvsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.TvsModel>> getNowPlayingTvs() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTvs, []),
              returnValue: Future<List<_i3.TvsModel>>.value(<_i3.TvsModel>[]))
          as _i5.Future<List<_i3.TvsModel>>);
  @override
  _i5.Future<List<_i3.TvsModel>> getPopularTvs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvs, []),
              returnValue: Future<List<_i3.TvsModel>>.value(<_i3.TvsModel>[]))
          as _i5.Future<List<_i3.TvsModel>>);
  @override
  _i5.Future<List<_i3.TvsModel>> getTopRatedTvs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvs, []),
              returnValue: Future<List<_i3.TvsModel>>.value(<_i3.TvsModel>[]))
          as _i5.Future<List<_i3.TvsModel>>);
  @override
  _i5.Future<List<_i3.TvsModel>> getTvsRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvsRecommendations, [id]),
              returnValue: Future<List<_i3.TvsModel>>.value(<_i3.TvsModel>[]))
          as _i5.Future<List<_i3.TvsModel>>);
  @override
  _i5.Future<List<_i3.TvsModel>> searchTvs(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvs, [query]),
              returnValue: Future<List<_i3.TvsModel>>.value(<_i3.TvsModel>[]))
          as _i5.Future<List<_i3.TvsModel>>);
  @override
  _i5.Future<_i3.TvsDetailResponse> getTvsDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvsDetail, [id]),
              returnValue: Future<_i3.TvsDetailResponse>.value(
                  _FakeTvsDetailResponse_1()))
          as _i5.Future<_i3.TvsDetailResponse>);
}

/// A class which mocks [TvsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvsLocalDataSource extends _i1.Mock
    implements _i3.TvsLocalDataSource {
  MockTvsLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> insertWatchListTvs(_i3.TvsTable? tvs) =>
      (super.noSuchMethod(Invocation.method(#insertWatchListTvs, [tvs]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> removeWatchListTvs(_i3.TvsTable? tvs) =>
      (super.noSuchMethod(Invocation.method(#removeWatchListTvs, [tvs]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i3.TvsTable?> getTvsById(int? id) => (super.noSuchMethod(
      Invocation.method(#getTvsById, [id]),
      returnValue: Future<_i3.TvsTable?>.value()) as _i5.Future<_i3.TvsTable?>);
  @override
  _i5.Future<List<_i3.TvsTable>> getWatchListTvs() =>
      (super.noSuchMethod(Invocation.method(#getWatchListTvs, []),
              returnValue: Future<List<_i3.TvsTable>>.value(<_i3.TvsTable>[]))
          as _i5.Future<List<_i3.TvsTable>>);
}

/// A class which mocks [DatabaseHelperTvs].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelperTvs extends _i1.Mock implements _i3.DatabaseHelperTvs {
  MockDatabaseHelperTvs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i7.Database?> get databaseTvs => (super.noSuchMethod(
      Invocation.getter(#databaseTvs),
      returnValue: Future<_i7.Database?>.value()) as _i5.Future<_i7.Database?>);
  @override
  _i5.Future<int> insertWatchlistTvs(_i3.TvsTable? tvs) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistTvs, [tvs]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> removeWatchlistTvs(_i3.TvsTable? tvs) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTvs, [tvs]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<Map<String, dynamic>?> getTvsById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvsById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i5.Future<Map<String, dynamic>?>);
  @override
  _i5.Future<List<Map<String, dynamic>>> getWatchlistTvs() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTvs, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i5.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [GetNowPlayingTvs].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingTvs extends _i1.Mock implements _i3.GetNowPlayingTvs {
  MockGetNowPlayingTvs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
}

/// A class which mocks [GetPopularTvs].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTvs extends _i1.Mock implements _i3.GetPopularTvs {
  MockGetPopularTvs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
}

/// A class which mocks [GetTopRatedTvs].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTvs extends _i1.Mock implements _i3.GetTopRatedTvs {
  MockGetTopRatedTvs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
}

/// A class which mocks [GetTvsRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvsRecommendations extends _i1.Mock
    implements _i3.GetTvsRecommendations {
  MockGetTvsRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
}

/// A class which mocks [GetTvsDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvsDetail extends _i1.Mock implements _i3.GetTvsDetail {
  MockGetTvsDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.TvsDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, _i3.TvsDetail>>.value(
                  _FakeEither_0<_i6.Failure, _i3.TvsDetail>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i3.TvsDetail>>);
}

/// A class which mocks [GetWatchlistTvs].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvs extends _i1.Mock implements _i3.GetWatchlistTvs {
  MockGetWatchlistTvs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i3.Tvs>>()))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tvs>>>);
}

/// A class which mocks [GetWatchlistTvsStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvsStatus extends _i1.Mock
    implements _i3.GetWatchlistTvsStatus {
  MockGetWatchlistTvsStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [RemoveTvsWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTvsWatchlist extends _i1.Mock
    implements _i3.RemoveTvsWatchlist {
  MockRemoveTvsWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> execute(_i3.TvsDetail? tvs) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvs]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i5.Future<_i2.Either<_i6.Failure, String>>);
}

/// A class which mocks [SaveTvsWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTvsWatchlist extends _i1.Mock implements _i3.SaveTvsWatchlist {
  MockSaveTvsWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvsRepository_2()) as _i3.TvsRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> execute(_i3.TvsDetail? tvs) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvs]),
              returnValue: Future<_i2.Either<_i6.Failure, String>>.value(
                  _FakeEither_0<_i6.Failure, String>()))
          as _i5.Future<_i2.Either<_i6.Failure, String>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_3()))
          as _i5.Future<_i4.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i5.Future<_i9.Uint8List>);
  @override
  _i5.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_4()))
          as _i5.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
